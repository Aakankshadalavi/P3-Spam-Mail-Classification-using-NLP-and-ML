# -*- coding: utf-8 -*-
"""spam Detcter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZGmRJO_ho5uCHe-TLI1HpfJ4ilw7bWnl
"""

!pip install streamlit
import streamlit as st
import pickle

import os
import streamlit as st
import pickle
current_dir = os.getcwd()
print(current_dir)
model_path = os.path.join(current_dir, 'model.pkl')
vec_path = os.path.join(current_dir, 'vec.pkl')
print(model_path)
import os
import streamlit as st
import pickle
current_dir = os.getcwd()
print(current_dir)
model_path = os.path.join(current_dir, 'model.pkl')
vec_path = os.path.join(current_dir, 'vec.pkl')
print(model_path)
print(vec_path)

def main():
  st.title("Email spam Classification Application")
  st.write("This is a Machine Learning application to classify emails into spam and Ham")
  st.subheader("Classification")
  user_input = st.text_area("Enter an email to classify" , height=150)
  message = st.text_input("Enter a message")
  if st.button("Predict"):
    if user_input:
      data=[user_input]
      vec = pickle.load(open(vec_path, 'rb'))
      data = vec.transform(data).toarray()
      model = pickle.load(open(model_path, 'rb'))
      prediction = model.predict(data)
def main():
  st.title("Email spam Classification Application")
  st.write("This is a Machine Learning application to classify emails into spam and Ham")
  st.subheader("Classification")
  user_input = st.text_area("Enter an email to classify" , height=150)
  message = st.text_input("Enter a message")
  if st.button("Predict"):
    if user_input:
      data=[user_input]
      vec = pickle.load(open(vec_path, 'rb'))
      data = vec.transform(data).toarray()
      model = pickle.load(open(model_path, 'rb'))
      prediction = model.predict(data)
      if prediction[0]==0:
        st.success("This is Ham Mail")
      else:
        st.error("This is Spam Mail") # Assuming you want to indicate spam
    else:
      st.write("Please enter an email to classify.")
      #main() # Removing recursion to avoid potential stack overflow